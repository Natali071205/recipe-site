{"ast":null,"code":"// import axios from \"axios\";\n// import React, { useState } from \"react\";\n\n// const AddRecipeMeneger = () => {\n//   const [recipeData, setRecipeData] = useState({\n//     publishDate: \"\",\n//     categoryCode: \"\",\n//     preparationTime: \"\",\n//     ingredients: [],\n//     preparationSteps: [],\n//     finalYield: \"\",\n//     likes: \"\",\n//   });\n\n//   const [image, setImage] = useState(null);\n//   const [ingredientInput, setIngredientInput] = useState(\"\");\n//   const [stepInput, setStepInput] = useState(\"\");\n\n//   const handleChange = (e) => {\n//     setRecipeData({\n//       ...recipeData,\n//       [e.target.name]: e.target.value,\n//     });\n//   };\n\n//   const handleImageChange = (e) => {\n//     setImage(e.target.files[0]);\n//   };\n\n//   const addIngredient = () => {\n//     if (ingredientInput.trim()) {\n//       setRecipeData({\n//         ...recipeData,\n//         ingredients: [...recipeData.ingredients, ingredientInput.trim()],\n//       });\n//       setIngredientInput(\"\");\n//     }\n//   };\n\n//   const addStep = () => {\n//     if (stepInput.trim()) {\n//       setRecipeData({\n//         ...recipeData,\n//         preparationSteps: [...recipeData.preparationSteps, stepInput.trim()],\n//       });\n//       setStepInput(\"\");\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Check if all required fields are filled\n//     if (!recipeData.publishDate || !recipeData.categoryCode || !recipeData.preparationTime || !recipeData.finalYield || !recipeData.likes) {\n//       alert(\"Please fill in all the required fields!\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n\n//     // Append image and other recipe data\n//     formData.append(\"image\", image);\n//     formData.append(\"publishDate\", recipeData.publishDate);\n//     formData.append(\"categoryCode\", recipeData.categoryCode);\n//     formData.append(\"preparationTime\", recipeData.preparationTime);\n//     formData.append(\"ingredients\", JSON.stringify(recipeData.ingredients));\n//     formData.append(\"preparationSteps\", JSON.stringify(recipeData.preparationSteps));\n//     formData.append(\"finalYield\", recipeData.finalYield);\n//     formData.append(\"likes\", recipeData.likes);\n\n//     // Debug: print out the FormData for checking\n//     for (let pair of formData.entries()) {\n//       console.log(pair[0], pair[1]);\n//     }\n\n//     try {\n//       const response = await axios.post(\"http://localhost:3000/recipes\", formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       });\n\n//       if (response.status === 200) {\n//         alert(\"Recipe added successfully!\");\n//         setRecipeData({\n//           publishDate: \"\",\n//           categoryCode: \"\",\n//           preparationTime: \"\",\n//           ingredients: [],\n//           preparationSteps: [],\n//           finalYield: \"\",\n//           likes: \"\",\n//         });\n//         setImage(null);\n//       } else {\n//         alert(\"Failed to add recipe.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error adding recipe:\", error);\n//       alert(\"An error occurred while adding the recipe.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Add New Recipe</h2>\n//       <form onSubmit={handleSubmit} encType=\"multipart/form-data\">\n//         <div>\n//           <label>Recipe Image:</label>\n//           <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} required />\n//         </div>\n//         <div>\n//           <label>Publish Date:</label>\n//           <input type=\"date\" name=\"publishDate\" value={recipeData.publishDate} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Category Code:</label>\n//           <input type=\"text\" name=\"categoryCode\" value={recipeData.categoryCode} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Preparation Time (minutes):</label>\n//           <input type=\"number\" name=\"preparationTime\" value={recipeData.preparationTime} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Ingredients:</label>\n//           <input type=\"text\" value={ingredientInput} onChange={(e) => setIngredientInput(e.target.value)} />\n//           <button type=\"button\" onClick={addIngredient}>Add Ingredient</button>\n//           <ul>\n//             {recipeData.ingredients.map((ing, index) => (\n//               <li key={index}>{ing}</li>\n//             ))}\n//           </ul>\n//         </div>\n//         <div>\n//           <label>Preparation Steps:</label>\n//           <input type=\"text\" value={stepInput} onChange={(e) => setStepInput(e.target.value)} />\n//           <button type=\"button\" onClick={addStep}>Add Step</button>\n//           <ul>\n//             {recipeData.preparationSteps.map((step, index) => (\n//               <li key={index}>{step}</li>\n//             ))}\n//           </ul>\n//         </div>\n//         <div>\n//           <label>Final Yield:</label>\n//           <input type=\"text\" name=\"finalYield\" value={recipeData.finalYield} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Likes:</label>\n//           <input type=\"number\" name=\"likes\" value={recipeData.likes} onChange={handleChange} required />\n//         </div>\n//         <button type=\"submit\">Add Recipe</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default AddRecipeMeneger;","map":{"version":3,"names":[],"sources":["/Users/nataliatiya/project/client/my-app/src/project/AddRecipeMeneger.jsx"],"sourcesContent":["// import axios from \"axios\";\n// import React, { useState } from \"react\";\n\n// const AddRecipeMeneger = () => {\n//   const [recipeData, setRecipeData] = useState({\n//     publishDate: \"\",\n//     categoryCode: \"\",\n//     preparationTime: \"\",\n//     ingredients: [],\n//     preparationSteps: [],\n//     finalYield: \"\",\n//     likes: \"\",\n//   });\n\n//   const [image, setImage] = useState(null);\n//   const [ingredientInput, setIngredientInput] = useState(\"\");\n//   const [stepInput, setStepInput] = useState(\"\");\n\n//   const handleChange = (e) => {\n//     setRecipeData({\n//       ...recipeData,\n//       [e.target.name]: e.target.value,\n//     });\n//   };\n\n//   const handleImageChange = (e) => {\n//     setImage(e.target.files[0]);\n//   };\n\n//   const addIngredient = () => {\n//     if (ingredientInput.trim()) {\n//       setRecipeData({\n//         ...recipeData,\n//         ingredients: [...recipeData.ingredients, ingredientInput.trim()],\n//       });\n//       setIngredientInput(\"\");\n//     }\n//   };\n\n//   const addStep = () => {\n//     if (stepInput.trim()) {\n//       setRecipeData({\n//         ...recipeData,\n//         preparationSteps: [...recipeData.preparationSteps, stepInput.trim()],\n//       });\n//       setStepInput(\"\");\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Check if all required fields are filled\n//     if (!recipeData.publishDate || !recipeData.categoryCode || !recipeData.preparationTime || !recipeData.finalYield || !recipeData.likes) {\n//       alert(\"Please fill in all the required fields!\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n\n//     // Append image and other recipe data\n//     formData.append(\"image\", image);\n//     formData.append(\"publishDate\", recipeData.publishDate);\n//     formData.append(\"categoryCode\", recipeData.categoryCode);\n//     formData.append(\"preparationTime\", recipeData.preparationTime);\n//     formData.append(\"ingredients\", JSON.stringify(recipeData.ingredients));\n//     formData.append(\"preparationSteps\", JSON.stringify(recipeData.preparationSteps));\n//     formData.append(\"finalYield\", recipeData.finalYield);\n//     formData.append(\"likes\", recipeData.likes);\n\n//     // Debug: print out the FormData for checking\n//     for (let pair of formData.entries()) {\n//       console.log(pair[0], pair[1]);\n//     }\n\n//     try {\n//       const response = await axios.post(\"http://localhost:3000/recipes\", formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       });\n\n//       if (response.status === 200) {\n//         alert(\"Recipe added successfully!\");\n//         setRecipeData({\n//           publishDate: \"\",\n//           categoryCode: \"\",\n//           preparationTime: \"\",\n//           ingredients: [],\n//           preparationSteps: [],\n//           finalYield: \"\",\n//           likes: \"\",\n//         });\n//         setImage(null);\n//       } else {\n//         alert(\"Failed to add recipe.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error adding recipe:\", error);\n//       alert(\"An error occurred while adding the recipe.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Add New Recipe</h2>\n//       <form onSubmit={handleSubmit} encType=\"multipart/form-data\">\n//         <div>\n//           <label>Recipe Image:</label>\n//           <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} required />\n//         </div>\n//         <div>\n//           <label>Publish Date:</label>\n//           <input type=\"date\" name=\"publishDate\" value={recipeData.publishDate} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Category Code:</label>\n//           <input type=\"text\" name=\"categoryCode\" value={recipeData.categoryCode} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Preparation Time (minutes):</label>\n//           <input type=\"number\" name=\"preparationTime\" value={recipeData.preparationTime} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Ingredients:</label>\n//           <input type=\"text\" value={ingredientInput} onChange={(e) => setIngredientInput(e.target.value)} />\n//           <button type=\"button\" onClick={addIngredient}>Add Ingredient</button>\n//           <ul>\n//             {recipeData.ingredients.map((ing, index) => (\n//               <li key={index}>{ing}</li>\n//             ))}\n//           </ul>\n//         </div>\n//         <div>\n//           <label>Preparation Steps:</label>\n//           <input type=\"text\" value={stepInput} onChange={(e) => setStepInput(e.target.value)} />\n//           <button type=\"button\" onClick={addStep}>Add Step</button>\n//           <ul>\n//             {recipeData.preparationSteps.map((step, index) => (\n//               <li key={index}>{step}</li>\n//             ))}\n//           </ul>\n//         </div>\n//         <div>\n//           <label>Final Yield:</label>\n//           <input type=\"text\" name=\"finalYield\" value={recipeData.finalYield} onChange={handleChange} required />\n//         </div>\n//         <div>\n//           <label>Likes:</label>\n//           <input type=\"number\" name=\"likes\" value={recipeData.likes} onChange={handleChange} required />\n//         </div>\n//         <button type=\"submit\">Add Recipe</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default AddRecipeMeneger;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}